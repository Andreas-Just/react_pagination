{"version":3,"sources":["components/TabsList.js","components/PageButton.js","components/Pagination.js","App.js","index.js"],"names":["TabsList","tabs","className","map","title","content","key","PageButton","onSwitch","children","disabled","active","cn","basic","type","onClick","defaultProps","Pagination","totalItemsAmount","itemsPerPage","currentPage","firstItem","lastItem","pagesAmount","Math","ceil","pageButtons","amount","result","i","push","genereatePageButtons","firstPage","lastPage","length","preCurrentPage","postCurrentPage","lastItemOnPage","page","options","App","state","switchPage","newPage","setState","changeItemsPerPage","event","target","value","this","generateTabs","firstTab","lastTab","visibleTabs","filter","_","index","htmlFor","id","onChange","option","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f17faef.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TabsList = ({ tabs }) => (\n  <>\n    <div className=\"ui top attached tabular menu\">\n      <h3 className=\"item ui header violet\">Tabs list</h3>\n    </div>\n    <ul className=\"ui bottom attached active tab segment tabs\">\n      {tabs.map(({ title, content }) => (\n        <li key={title}>\n          <h4 className=\"tabs__title\">{title}</h4>\n          <p className=\"tabs__content\">{content}</p>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nTabsList.propTypes = {\n  tabs: PropTypes.arrayOf(\n    PropTypes.objectOf(PropTypes.string),\n  ).isRequired,\n};\n\nexport default TabsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst PageButton = ({ onSwitch, children, disabled, active }) => (\n  <button\n    disabled={disabled}\n    className={cn('ui violet button paginator__button', {\n      basic: active,\n    })}\n    type=\"button\"\n    onClick={onSwitch}\n  >\n    {children}\n  </button>\n);\n\nPageButton.defaultProps = {\n  onSwitch: () => {},\n  disabled: false,\n  active: false,\n};\n\nPageButton.propTypes = {\n  onSwitch: PropTypes.func,\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n};\n\nexport default PageButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageButton from './PageButton';\n\nconst genereatePageButtons = (amount) => {\n  const result = [];\n\n  for (let i = 1; i <= amount; i += 1) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nconst Pagination = ({\n  totalItemsAmount,\n  itemsPerPage,\n  currentPage,\n  onSwitch,\n  firstItem,\n  lastItem,\n}) => {\n  const pagesAmount = Math.ceil(totalItemsAmount / itemsPerPage);\n  const pageButtons = genereatePageButtons(pagesAmount);\n  const firstPage = pageButtons[0];\n  const lastPage = pageButtons[pageButtons.length - 1];\n  const preCurrentPage = currentPage - 1;\n  const postCurrentPage = currentPage + 1;\n  const lastItemOnPage = lastItem > totalItemsAmount\n    ? totalItemsAmount\n    : lastItem;\n\n  return (\n    <div className=\"paginator\">\n      <button\n        className=\"ui violet button paginator__prev-btn\"\n        type=\"button\"\n        onClick={() => onSwitch(currentPage - 1)}\n        disabled={currentPage === 1}\n      >\n        Previous\n      </button>\n\n      {pageButtons.map((page) => {\n        if (page === firstPage || page === lastPage) {\n          if (page === currentPage) {\n            return (\n              <PageButton\n                active\n                onSwitch={() => onSwitch(page)}\n                page={page}\n              >\n                {page}\n              </PageButton>\n            );\n          }\n\n          return (\n            <PageButton onSwitch={() => onSwitch(page)} page={page}>\n              {page}\n            </PageButton>\n          );\n        }\n\n        if (page === currentPage) {\n          return (\n            <PageButton\n              active\n              onSwitch={() => onSwitch(page)}\n              page={page}\n            >\n              {page}\n            </PageButton>\n          );\n        }\n\n        if (page === preCurrentPage) {\n          if (page === firstPage + 1) {\n            return (\n              <PageButton onSwitch={() => onSwitch(page)} page={page}>\n                {page}\n              </PageButton>\n            );\n          }\n\n          return (\n            <>\n              <PageButton disabled>\n                ...\n              </PageButton>\n              <PageButton onSwitch={() => onSwitch(page)} page={page}>\n                {page}\n              </PageButton>\n            </>\n          );\n        }\n\n        if (page === postCurrentPage) {\n          if (page === lastPage - 1) {\n            return (\n              <PageButton onSwitch={() => onSwitch(page)} page={page}>\n                {page}\n              </PageButton>\n            );\n          }\n\n          return (\n            <>\n              <PageButton onSwitch={() => onSwitch(page)} page={page}>\n                {page}\n              </PageButton>\n              <PageButton disabled>\n                ...\n              </PageButton>\n            </>\n          );\n        }\n\n        return '';\n      })}\n\n      <button\n        className=\"ui violet button paginator__prev-btn\"\n        type=\"button\"\n        onClick={() => onSwitch(currentPage + 1)}\n        disabled={currentPage === pagesAmount}\n      >\n        Next\n      </button>\n\n      <p className=\"paginator__info\">\n        {`Items: from ${firstItem} to ${lastItemOnPage} of ${totalItemsAmount}`}\n      </p>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  totalItemsAmount: PropTypes.number.isRequired,\n  itemsPerPage: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  firstItem: PropTypes.number.isRequired,\n  lastItem: PropTypes.number.isRequired,\n  onSwitch: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport './App.scss';\nimport TabsList from './components/TabsList';\nimport Pagination from './components/Pagination';\n\nconst options = [1, 2, 3, 5, 10, 20];\n\nconst generateTabs = (amount) => {\n  const result = [];\n\n  for (let i = 1; i <= amount; i += 1) {\n    result.push({\n      title: `Tab ${i}`,\n      content: `Some text ${i}`,\n    });\n  }\n\n  return result;\n};\n\nclass App extends React.Component {\n  state = {\n    page: 1,\n    itemsPerPage: 1,\n  };\n\n  switchPage = (newPage) => {\n    this.setState({\n      page: newPage,\n    });\n  };\n\n  changeItemsPerPage = (event) => {\n    this.setState({\n      itemsPerPage: +event.target.value,\n      page: 1,\n    });\n  }\n\n  render() {\n    const { page, itemsPerPage } = this.state;\n    const tabs = generateTabs(120);\n    const firstTab = (page - 1) * itemsPerPage + 1;\n    const lastTab = page * itemsPerPage;\n    const visibleTabs = tabs.filter(\n      (_, index) => index >= firstTab - 1 && index < lastTab,\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"main-title ui header violet\">\n          {`${tabs.length} Tabs`}\n        </h1>\n\n        <div className=\"select\">\n          <label htmlFor=\"select__pages\">Items per page: &nbsp;</label>\n          <select\n            id=\"select__pages\"\n            onChange={this.changeItemsPerPage}\n            className=\"select__pages ui fluid dropdown\"\n          >\n            {options.map(option => (\n              <option\n                value={option}\n                key={option}\n                className=\"select__option\"\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n          <p>{`Current page: ${page}`}</p>\n        </div>\n\n        <Pagination\n          totalItemsAmount={tabs.length}\n          itemsPerPage={itemsPerPage}\n          currentPage={page}\n          onSwitch={this.switchPage}\n          firstItem={firstTab}\n          lastItem={lastTab}\n        />\n\n        <TabsList\n          tabs={visibleTabs}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}